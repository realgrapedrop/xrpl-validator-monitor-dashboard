# docker-compose-full.yml
# Complete XRPL Validator + Monitoring Stack
# Replace ${INSTALL_DIR} with your installation path during setup

services:
  # XRPL Validator
  rippledvalidator:
    container_name: rippledvalidator
    image: xrpllabsofficial/xrpld:2.6.1
    restart: always
    init: true
    stop_grace_period: 90s
    entrypoint: /opt/ripple/bin/rippled
    command: ["--conf", "/opt/ripple/etc/rippled.cfg"]
    
    ports:
      - "51235:51235/tcp"
      - "51235:51235/udp"
      - "127.0.0.1:5005:5005"   # Admin HTTP (Prometheus scrapes here)
      - "127.0.0.1:6006:6006"   # Admin WebSocket
      - "127.0.0.1:5006:5006"   # Optional second WS
    
    volumes:
      - ${INSTALL_DIR}/rippled/config/rippled.cfg:/opt/ripple/etc/rippled.cfg:ro
      - ${INSTALL_DIR}/rippled/config/validators.txt:/opt/ripple/etc/validators.txt:ro
      - ${INSTALL_DIR}/rippled/config/validator-keys.json:/keystore/validator-keys.json:ro
      - ${INSTALL_DIR}/rippled/data:/var/lib/rippled
      - ${INSTALL_DIR}/monitoring/xrp-watchdog/data/raw:/output/raw
      - ${INSTALL_DIR}/monitoring/xrp-watchdog/logs:/output/logs
    
    # Resource limits - adjust based on your hardware
    # Recommended: 64GB RAM for node_size: huge
    mem_limit: "64g"
    memswap_limit: "64g"
    cpus: "8.0"
    # cpuset: "0-7"  # Optional: pin to specific CPU cores
    
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    
    # Security hardening
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "/opt/ripple/bin/rippled --conf /opt/ripple/etc/rippled.cfg -q server_info | grep -Eq '\"server_state\"\\s*:\\s*\"(proposing|full)\"'"]
      interval: 30s
      timeout: 10s
      start_period: 120s
      retries: 10
    
    networks:
      - xrpl-network

  # Prometheus - Metrics Collection
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.54.1
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    
    ports:
      - "127.0.0.1:9090:9090"
    
    volumes:
      - ${INSTALL_DIR}/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ${INSTALL_DIR}/monitoring/prometheus/data:/prometheus
    
    networks:
      - xrpl-network
    
    depends_on:
      - rippledvalidator

  # Grafana - Visualization
  grafana:
    container_name: grafana
    image: grafana/grafana:11.2.0
    restart: always
    
    ports:
      - "3000:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=
    
    volumes:
      - ${INSTALL_DIR}/monitoring/grafana/data:/var/lib/grafana
      - ${INSTALL_DIR}/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    
    networks:
      - xrpl-network
    
    depends_on:
      - prometheus

  # Node Exporter - Host Metrics
  node_exporter:
    container_name: node_exporter
    image: prom/node-exporter:v1.8.2
    restart: always
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    
    ports:
      - "127.0.0.1:9100:9100"
    
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    
    networks:
      - xrpl-network

  # cAdvisor - Container Metrics (Optional)
  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    restart: always
    
    ports:
      - "127.0.0.1:8080:8080"
    
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    
    privileged: true
    devices:
      - /dev/kmsg
    
    networks:
      - xrpl-network

networks:
  xrpl-network:
    driver: bridge
